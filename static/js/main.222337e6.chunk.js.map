{"version":3,"sources":["Movie.js","MovieContext.js","MovieList.js","AddMovie.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","name","price","MovieContext","createContext","MovieProvider","useState","id","movies","setMovies","Provider","value","children","MovieList","useContext","map","movie","key","AddMovie","setName","setPrice","onSubmit","e","preventDefault","length","alert","prevMovies","type","onChange","target","placeholder","Nav","className","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0SAgBeA,EAdD,SAACC,GAEX,OAEE,6BACE,4BAAKA,EAAMC,MACX,2BAAID,EAAME,SCLLC,EAAeC,0BAEfC,EAAgB,SAACL,GAAW,IAAD,EAETM,mBAAS,CAEhC,CAAEL,KAAM,SAAUC,MAAO,MAAOK,GAAI,OACpC,CAAEN,KAAM,OAAQC,MAAO,MAAOK,GAAI,OAClC,CAAEN,KAAM,aAAcC,MAAO,MAAOK,GAAI,SANR,mBAE9BC,EAF8B,KAEtBC,EAFsB,KAUpC,OAEC,kBAACN,EAAaO,SAAd,CAAuBC,MAAO,CAACH,EAAOC,IACnCT,EAAMY,WCGCC,EAjBG,WAAO,IAAD,EAEOC,qBAAWX,GAFlB,mBAEdK,EAFc,UAIpB,OAEE,6BACMA,EAAOO,KAAI,SAAAC,GAAK,OACR,kBAAC,EAAD,CAAOf,KAAMe,EAAMf,KAAMC,MAAOc,EAAMd,MAAOe,IAAKD,EAAMT,U,OCqC7DW,G,MA5CE,WAAO,IAAD,EAEKZ,mBAAS,IAFd,mBAEZL,EAFY,KAENkB,EAFM,OAGOb,mBAAS,IAHhB,mBAGZJ,EAHY,KAGLkB,EAHK,OAISN,qBAAWX,GAJpB,mBAIJM,GAJI,WA4BpB,OAEI,0BAAMY,SAhBQ,SAACC,GACdA,EAAEC,iBACkB,IAAhBtB,EAAKuB,OACNC,MAAM,iCAGLhB,GAAU,SAAAiB,GAAU,4BAAQA,GAAR,CAAoB,CAAEzB,KAAMA,EAAMC,MAAOA,UAW9D,2BAAOyB,KAAK,OAAO1B,KAAK,OAAOU,MAAOV,EAAM2B,SAzBhC,SAACN,GAChBH,EAAQG,EAAEO,OAAOlB,QAwBoDmB,YAAY,eAC9E,2BAAOH,KAAK,OAAO1B,KAAK,QAAQU,MAAOT,EAAO0B,SAtBjC,SAACN,GACjBF,EAASE,EAAEO,OAAOlB,QAqBsDmB,YAAY,UACjF,6CClBIC,G,MAhBH,WAAO,IAAD,EAEcjB,qBAAWX,GAFzB,mBAEPK,EAFO,UAId,OAEE,yBAAKwB,UAAU,OACb,0CACA,8CAAoBxB,EAAOgB,OAA3B,QCQOS,MAZf,WACE,OACE,kBAAC,EAAD,KACA,yBAAKD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.222337e6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Movie = (props) => {\r\n\r\n    return(\r\n       \r\n      <div>\r\n        <h3>{props.name}</h3>\r\n        <p>{props.price}</p>\r\n      </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Movie;","import React,{useState,createContext} from 'react';\r\n\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieProvider = (props) => {\r\n\r\n    const[movies, setMovies] = useState([\r\n           \r\n        { name: \"Rustom\", price: \"50$\", id: 12345 },\r\n        { name: \"Baby\", price: \"20$\", id: 54321 },\r\n        { name: \"Special 26\", price: \"30$\", id: 13265 }\r\n \r\n     ]);\r\n\r\n    return(\r\n       \r\n     <MovieContext.Provider value={[movies,setMovies]}>\r\n       {props.children}\r\n     </MovieContext.Provider>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n","import React,{ useState,useContext } from 'react';\r\nimport Movie from './Movie';\r\nimport {MovieContext} from './MovieContext';\r\n\r\nconst MovieList = () => {\r\n\r\n   const [movies, setMovies] = useContext(MovieContext)\r\n   \r\n    return(\r\n       \r\n      <div>\r\n          { movies.map(movie =>(\r\n                    <Movie name={movie.name} price={movie.price} key={movie.id} />\r\n          ))}\r\n      </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default MovieList;","import React,{useState, useContext} from 'react';\r\nimport {MovieContext} from './MovieContext';\r\nimport './AddMovie.css';\r\n\r\n\r\nconst AddMovie = () => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [movies, setMovies] = useContext(MovieContext);\r\n\r\n    const updateName = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    const updatePrice = (e) => {\r\n        setPrice(e.target.value);\r\n    };\r\n\r\n    const addMovie = (e) => {\r\n        e.preventDefault();\r\n        if (name.length === 0){ \r\n           alert(\"Movie Name and Price is empty\");  \t\r\n            \r\n        }else{\r\n            setMovies(prevMovies => [...prevMovies, { name: name, price: price }]);\r\n            \r\n        }\r\n        \r\n    };\r\n\r\n\r\n\r\n   return(\r\n    \r\n       <form onSubmit={addMovie}>\r\n           <input type=\"text\" name=\"name\" value={name} onChange={updateName} placeholder=\"Movie Name\" />\r\n           <input type=\"text\" name=\"price\" value={price} onChange={updatePrice} placeholder=\"Price\" />\r\n           <button>Submit</button>\r\n       </form>\r\n\r\n\r\n  \r\n\r\n     \r\n   );\r\n\r\n}\r\n\r\nexport default AddMovie;","import React, {useContext} from 'react';\r\nimport {MovieContext} from './MovieContext';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n    \r\n    const [movies, setMovies] = useContext(MovieContext);\r\n\r\n    return(\r\n       \r\n      <div className=\"nav\">\r\n        <h2>MovieMania</h2>\r\n        <p>List of Movies: {movies.length} </p>\r\n      </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport MovieList from './MovieList';\nimport AddMovie from './AddMovie';\nimport Nav from './Nav';\nimport { MovieProvider } from './MovieContext';\n\n\nfunction App() {\n  return (\n    <MovieProvider>\n    <div className=\"App\">\n      <Nav />\n      <AddMovie />\n      <MovieList />\n    </div>\n    </MovieProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}